library(magrittr)
library(tidyr)
library(stringr)
library(httr)
myleague(1639, "yes")
detach("package:footyr", unload = TRUE)
require("footyr")
library(footyr)
?require
devtools::load_all(".")
library(footyr)
require("footyr")
ID(1639)
ID(1630, "Arsenal")
knitr::opts_chunk$set(collapse = TRUE, comment = "#>")
library(dplyr)
library(tibble)
library(jsonlite)
library(magrittr)
library(tidyr)
library(stringr)
library(httr)
ID(1630, "Arsenal")
library(footyr)
ID(1630, "Arsenal")
devtools::load_all(".")
devtools::load_all(".")
library(footyr)
ID(1639, "Arsenal")
myleague(1639, "yes")
ID("English Premier League")
detach("package:footyr", unload = TRUE)
ID("English Premier League")
devtools::load_all(".")
devtools::load_all(".")
ID("English Premier League")
library(devtools)
library(roxygen2)
licence()
use_mit_license()
document()
licence(footyr)
licence("footyr")
licence()
knitr::opts_chunk$set(collapse = TRUE, comment = "#>")
library(dplyr)
library(tibble)
library(jsonlite)
library(magrittr)
library(tidyr)
library(stringr)
library(httr)
#Load the package
library(footyr)
ID("English Premier League", "Arsenal")
ID("Spanish La Liga")
myteam(1639)
myleague(1639)
devtools::load_all(".")
myleague(1639)
myleague(1639, "yes")
#Load the package
library(footyr)
library(footyr)
myleague(1639, "yes")
devtools::load_all(".")
myleague(1639)
ID("English Premier League", "Arsenal")
library(footyr)
myleague(1639)
devtools::load_all(".")
check()
library(devtools)
library(roxygen2)
check()
library(footyr)
ID(league_name = "English Premier League", team_name = "Arsenal")
ID(league_name = "Spanish La Liga")
myleague(leagueID = 1639)
#Load the package
library(footyr)
myleague(leagueID = 1639, table = "yes")
check()
#Load the package
library(footyr)
devtools::load_all()
myplayer(teamID = 19)
myplayer(teamID = 19, player_name = "Mesut Ozil")
myplayer(teamID = 19, player_name = "Mesut Ozil")
myplayer(teamID = 19, player_name = "Bernd Leno")
myplayer(teamID = 19, player_name = "Bernd Leno")
myplayer(teamID = 19, player_name = "Bernd Leno")
myplayer(teamID = 19)
myplayer(teamID = 19, player_name = "Bernd Leno")
#Libraries
library(dplyr)
library(tibble)
library(jsonlite)
library(tidyr)
library(stringr)
library(httr)
myplayer <- function(teamID, player_name = NA){
base_url <- "http://api.isportsapi.com/sport/football/"
call_url_player <- str_c(base_url, "player?", "teamId=", teamID, "&api_key=", Sys.getenv("ISPORT_KEY"))
#Obtain DF for squad info of team
team_call <- GET(call_url_player)
if (team_call$status_code != 200) {
stop ("Error when calling API. Response: ", content(team_call))
}
team_df <- as.data.frame(fromJSON(toJSON(content(team_call)))) %>%
unnest(cols = c(data.recordId, data.playerId, data.name, data.birthday, data.height,
data.country, data.feet, data.weight, data.photo, data.value,
data.teamId, data.position, data.number, data.introduce,
data.contractEndDate)) %>%
select(TeamID = data.teamId, PlayerID = data.playerId, Name = data.name, Birthday = data.birthday,
Height = data.height, Country = data.country, Dominant_Foot = data.feet,
Weight = data.weight, Value = data.value,
Player_Position = data.position, Jersey_Number = data.number,
Contract_Expiry = data.contractEndDate)
#Retrieving info about a particular player
is_na <- is.na(player_name)
if (is_na == FALSE) {
team1 <- str_detect(team_df$data.name, player_name)
if (any(team1) == TRUE) {
team_df1 <- team_df %>%
filter(data.name == player_name) %>%
select(TeamID = data.teamId, PlayerID = data.playerId, Name = data.name, Birthday = data.birthday,
Height = data.height, Country = data.country, Dominant_Foot = data.feet,
Weight = data.weight, Value = data.value,
Player_Position = data.position, Jersey_Number = data.number,
Contract_Expiry = data.contractEndDate)
print(team_df1)
} else if (all(team1) == FALSE){
stop("Your player is not in this team. Please input the correct player name / team ID.")
}
} else if (is_na == TRUE) {
print(team_df)
}
}
myplayer(19)
myplayer(19, "Mesut Ozil")
myplayer(19, "Mesut Ozil")
myplayer <- function(teamID, player_name = NA){
base_url <- "http://api.isportsapi.com/sport/football/"
call_url_player <- str_c(base_url, "player?", "teamId=", teamID, "&api_key=", Sys.getenv("ISPORT_KEY"))
#Obtain DF for squad info of team
team_call <- GET(call_url_player)
if (team_call$status_code != 200) {
stop ("Error when calling API. Response: ", content(team_call))
}
team_df <- as.data.frame(fromJSON(toJSON(content(team_call)))) %>%
unnest(cols = c(data.recordId, data.playerId, data.name, data.birthday, data.height,
data.country, data.feet, data.weight, data.photo, data.value,
data.teamId, data.position, data.number, data.introduce,
data.contractEndDate)) %>%
select(TeamID = data.teamId, PlayerID = data.playerId, Name = data.name, Birthday = data.birthday,
Height = data.height, Country = data.country, Dominant_Foot = data.feet,
Weight = data.weight, Value = data.value,
Player_Position = data.position, Jersey_Number = data.number,
Contract_Expiry = data.contractEndDate)
#Retrieving info about a particular player
is_na <- is.na(player_name)
if (is_na == FALSE) {
team1 <- str_detect(team_df$data.name, player_name)
if (any(team1) == TRUE) {
team_df1 <- team_df %>%
filter(data.name == player_name)
print(team_df1)
} else if (all(team1) == FALSE){
stop("Your player is not in this team. Please input the correct player name / team ID.")
}
} else if (is_na == TRUE) {
print(team_df)
}
}
myplayer(19, "Mesut Ozil")
myplayer(19, "Mesut Ozil")
myplayer(19, "Mesut Ozil")
}
myplayer <- function(teamID, player_name = NA){
base_url <- "http://api.isportsapi.com/sport/football/"
call_url_player <- str_c(base_url, "player?", "teamId=", teamID, "&api_key=", Sys.getenv("ISPORT_KEY"))
#Obtain DF for squad info of team
team_call <- GET(call_url_player)
if (team_call$status_code != 200) {
stop ("Error when calling API. Response: ", content(team_call))
}
team_df <- as.data.frame(fromJSON(toJSON(content(team_call)))) %>%
unnest(cols = c(data.recordId, data.playerId, data.name, data.birthday, data.height,
data.country, data.feet, data.weight, data.photo, data.value,
data.teamId, data.position, data.number, data.introduce,
data.contractEndDate)) %>%
select(TeamID = data.teamId, PlayerID = data.playerId, Name = data.name, Birthday = data.birthday,
Height = data.height, Country = data.country, Dominant_Foot = data.feet,
Weight = data.weight, Value = data.value,
Player_Position = data.position, Jersey_Number = data.number,
Contract_Expiry = data.contractEndDate)
#Retrieving info about a particular player
is_na <- is.na(player_name)
if (is_na == FALSE) {
team1 <- str_detect(team_df$data.name, player_name)
if (any(team1) == TRUE) {
team_df1 <- team_df %>%
filter(data.name == player_name)
print(team_df1)
} else if (all(team1) == FALSE){
stop("Your player is not in this team. Please input the correct player name / team ID.")
}
} else if (is_na == TRUE) {
print(team_df)
}
}
myplayer(19, "Mesut Ozil")
myplayer <- function(teamID, player_name = NA){
base_url <- "http://api.isportsapi.com/sport/football/"
call_url_player <- str_c(base_url, "player?", "teamId=", teamID, "&api_key=", Sys.getenv("ISPORT_KEY"))
#Obtain DF for squad info of team
team_call <- GET(call_url_player)
if (team_call$status_code != 200) {
stop ("Error when calling API. Response: ", content(team_call))
}
team_df <- as.data.frame(fromJSON(toJSON(content(team_call)))) %>%
unnest(cols = c(data.recordId, data.playerId, data.name, data.birthday, data.height,
data.country, data.feet, data.weight, data.photo, data.value,
data.teamId, data.position, data.number, data.introduce,
data.contractEndDate)) %>%
select(TeamID = data.teamId, PlayerID = data.playerId, Name = data.name, Birthday = data.birthday,
Height = data.height, Country = data.country, Dominant_Foot = data.feet,
Weight = data.weight, Value = data.value,
Player_Position = data.position, Jersey_Number = data.number,
Contract_Expiry = data.contractEndDate)
#Retrieving info about a particular player
is_na <- is.na(player_name)
if (is_na == FALSE) {
team1 <- str_detect(team_df$data.name, player_name)
if (any(team1) == TRUE) {
team_df1 <- team_df %>%
filter(data.name == player_name)
print(team_df1)
} else if (all(team1) == FALSE){
stop("Your player is not in this team. Please input the correct player name / team ID.")
}
} else if (is_na == TRUE) {
print(team_df)
}
}
myplayer(19, "Mesut Ozil")
myplayer <- function(teamID, player_name = NA){
base_url <- "http://api.isportsapi.com/sport/football/"
call_url_player <- str_c(base_url, "player?", "teamId=", teamID, "&api_key=", Sys.getenv("ISPORT_KEY"))
#Obtain DF for squad info of team
team_call <- GET(call_url_player)
if (team_call$status_code != 200) {
stop ("Error when calling API. Response: ", content(team_call))
}
team_df <- as.data.frame(fromJSON(toJSON(content(team_call)))) %>%
unnest(cols = c(data.recordId, data.playerId, data.name, data.birthday, data.height,
data.country, data.feet, data.weight, data.photo, data.value,
data.teamId, data.position, data.number, data.introduce,
data.contractEndDate)) %>%
select(TeamID = data.teamId, PlayerID = data.playerId, Name = data.name, Birthday = data.birthday,
Height = data.height, Country = data.country, Dominant_Foot = data.feet,
Weight = data.weight, Value = data.value,
Player_Position = data.position, Jersey_Number = data.number,
Contract_Expiry = data.contractEndDate)
#Retrieving info about a particular player
is_na <- is.na(player_name)
if (is_na == FALSE) {
team1 <- str_detect(team_df$data.name, player_name)
if (any(team1) == TRUE) {
team_df1 <- team_df %>%
filter(Name == player_name)
print(team_df1)
} else if (all(team1) == FALSE){
stop("Your player is not in this team. Please input the correct player name / team ID.")
}
} else if (is_na == TRUE) {
print(team_df)
}
}
myplayer(19, "Mesut Ozil")
myplayer <- function(teamID, player_name = NA){
base_url <- "http://api.isportsapi.com/sport/football/"
call_url_player <- str_c(base_url, "player?", "teamId=", teamID, "&api_key=", Sys.getenv("ISPORT_KEY"))
#Obtain DF for squad info of team
team_call <- GET(call_url_player)
if (team_call$status_code != 200) {
stop ("Error when calling API. Response: ", content(team_call))
}
team_df <- as.data.frame(fromJSON(toJSON(content(team_call)))) %>%
unnest(cols = c(data.recordId, data.playerId, data.name, data.birthday, data.height,
data.country, data.feet, data.weight, data.photo, data.value,
data.teamId, data.position, data.number, data.introduce,
data.contractEndDate)) %>%
select(TeamID = data.teamId, PlayerID = data.playerId, Name = data.name, Birthday = data.birthday,
Height = data.height, Country = data.country, Dominant_Foot = data.feet,
Weight = data.weight, Value = data.value,
Player_Position = data.position, Jersey_Number = data.number,
Contract_Expiry = data.contractEndDate)
#Retrieving info about a particular player
is_na <- is.na(player_name)
if (is_na == FALSE) {
team1 <- str_detect(team_df$Name, player_name)
if (any(team1) == TRUE) {
team_df1 <- team_df %>%
filter(Name == player_name)
print(team_df1)
} else if (all(team1) == FALSE){
stop("Your player is not in this team. Please input the correct player name / team ID.")
}
} else if (is_na == TRUE) {
print(team_df)
}
}
myplayer(19, "Mesut Ozil")
myplayer(teamID = 19, player_name = "Bernd Leno")
myteam(leagueID = 1639, "Arsenal")
myteam <- function(leagueID, team_name, past_results = "no", future = NA) {
base_url <- "http://api.isportsapi.com/sport/football/"
call_url_team <- str_c(base_url, "team?", "leagueId=", leagueID, "&api_key=", Sys.getenv("ISPORT_KEY"))
#Retrieving team and league info
team_query <- GET(call_url_team)
league_team_df <- as.data.frame(fromJSON(toJSON(content(team_query)))) %>%
unnest(cols = c(data.teamId, data.leagueId, data.name, data.logo, data.foundingDate,
data.address, data.area, data.venue, data.capacity, data.coach,
data.website))
if (team_query$status_code != 200) {
stop ("Error when calling API. Response: ", content(team_query))
}
#Checking if team_name is in the correct league
team <- str_detect(league_team_df$data.name, team_name)
if (any(team) == TRUE) {
league_team_df <- league_team_df %>%
filter(data.name == team_name)
team_id <- league_team_df[,3]
} else {
stop("Your team is not in this league. Input the correct leagueID / team_name")
}
call_url_teamdata <- str_c(base_url, "team?", "leagueId=", leagueID, "&teamId=", team_id, "&api_key=", Sys.getenv("ISPORT_KEY"))
message("Calling ", call_url_teamdata)
#Retrieving data about team
team_query1 <- GET(call_url_teamdata)
team_df1 <- as.data.frame(fromJSON(toJSON(content(team_query1)))) %>%
unnest(cols = c(data.teamId, data.leagueId, data.name, data.logo,
data.foundingDate, data.address, data.area, data.venue,
data.capacity, data.coach, data.website)) %>%
select(TeamID = data.teamId, LeagueID = data.leagueId, Club_Name = data.name, Founding_Date = data.foundingDate,
Area = data.area, Stadium = data.venue, Stadium_Capacity = data.capacity, Manager = data.coach,
Website = data.website)
if (team_query1$status_code != 200) {
stop ("Error when calling API. Response: ", content(team_query1))
}
if (past_results == "yes") {
call_url_results <- str_c(base_url, "standing/league?leagueId=", leagueID, "&api_key=", Sys.getenv("ISPORT_KEY"))
#Retrieving data on past results
past_query <- GET(call_url_results)
past_list <- fromJSON(toJSON(content(past_query)))
past_df <- as.data.frame(past_list$data[4]) %>%
unnest(cols = c(totalStandings.rank, totalStandings.teamId, totalStandings.winRate,
totalStandings.drawRate, totalStandings.loseRate, totalStandings.winAverage,
totalStandings.loseAverage, totalStandings.deduction,
totalStandings.deductionExplain, totalStandings.recentFirstResult, totalStandings.recentSecondResult,
totalStandings.recentThirdResult, totalStandings.recentFourthResult,
totalStandings.recentFifthResult, totalStandings.recentSixthResult,
totalStandings.color, totalStandings.red, totalStandings.totalCount,
totalStandings.winCount, totalStandings.drawCount, totalStandings.loseCount,
totalStandings.getScore, totalStandings.loseScore, totalStandings.goalDifference,
totalStandings.integral))
if (past_query$status_code != 200) {
stop ("Error when calling API. Response: ", content(past_query))
}
past_df <- past_df %>%
select(TeamID = totalStandings.teamId, "1" = totalStandings.recentFirstResult, "2" = totalStandings.recentSecondResult,
"3" = totalStandings.recentThirdResult, "4" = totalStandings.recentFourthResult,
"5" = totalStandings.recentFifthResult, "6" = totalStandings.recentSixthResult)
past_df[2:7] <- past_df[2:7] %>%
lapply(function(x) factor(x, levels = c(0,1,2,3), labels = c("W", "D", "L", NA)))
team_df2 <- left_join(team_df1, past_df, by = "TeamID")
print(team_df2)
} else if (past_results == "no") {
print(team_df1)
}
check <- is.double(future)
if (check ==  TRUE) {
call_url_future <- str_c(base_url, "schedule?leagueId=", leagueID, "&api_key=", Sys.getenv("ISPORT_KEY"))
message("Calling ", call_url_future)
#Retrieving data on future fixtures
future_query <- GET(call_url_future)
future_list <- fromJSON(toJSON(content(future_query)))
if (future_query$status_code != 200) {
stop ("Error when calling API. Response: ", content(future_query))
}
future_df <- as.data.frame(future_list) %>%
flatten() %>%
unnest(cols = c(data.matchId, data.leagueType, data.leagueId, data.leagueName,
data.leagueShortName, data.subLeagueId, data.subLeagueName,
data.matchTime, data.halfStartTime, data.status, data.homeId,
data.homeName, data.awayId, data.awayName, data.homeScore,
data.awayScore, data.homeHalfScore, data.awayHalfScore, data.homeRed,
data.awayRed, data.homeYellow, data.awayYellow, data.homeCorner,
data.awayCorner, data.homeRank, data.awayRank, data.season,
data.round, data.group, data.location, data.weather, data.temperature,
data.explain, data.hasLineup, data.neutral, data.extraExplain.kickOff,
data.extraExplain.minute, data.extraExplain.homeScore, data.extraExplain.awayScore,
data.extraExplain.extraTimeStatus, data.extraExplain.extraHomeScore,
data.extraExplain.extraAwayScore, data.extraExplain.penHomeScore,
data.extraExplain.penAwayScore, data.extraExplain.twoRoundsHomeScore,
data.extraExplain.twoRoundsAwayScore, data.extraExplain.winner))
future_df1 <- future_df %>%
filter(data.status != -1) %>%
filter(data.homeName == team_name | data.awayName == team_name) %>%
select(MatchID = data.matchId, League_Name = data.leagueName, Home = data.homeName,
Away = data.awayName, Location = data.location)
print(head(future_df1, future))
}
}
myteam(1134, "Real Madrid")
myteam(leagueID = 1639, "Arsenal")
document()
myteam(leagueID = 1639, team_name = "Arsenal")
myteam(leagueID = 1639, team_name = "Arsenal", past_results = "yes")
myteam(leagueID = 1639, team_name = "Arsenal", past_results = "yes", future = 5)
mytopstats(leagueID = 1639)
mytopstats(leagueID = 1639, "Goals")
mytopstats(leagueID = 1639, stat = "Goals")
mytopstats(leagueID = 1134, stat = "Assists" )
Here we request for more details for the EPL.
mytopstats(leagueID = 1639, stat = "Goals", more_details = "yes")
check()
devtools::load_all(".")
devtools::load_all()
knitr::opts_chunk$set(collapse = TRUE, comment = "#>")
library(dplyr)
library(tibble)
library(jsonlite)
library(magrittr)
library(tidyr)
library(stringr)
library(httr)
#Load the package
library(footyr)
ID(league_name = "English Premier League", team_name = "Arsenal")
ID(league_name = "Spanish La Liga")
myleague(leagueID = 1639)
devtools::load_all(".")
knitr::opts_chunk$set(collapse = TRUE, comment = "#>")
library(dplyr)
library(tibble)
library(jsonlite)
library(magrittr)
library(tidyr)
library(stringr)
library(httr)
#Load the package
library(footyr)
ID(league_name = "English Premier League", team_name = "Arsenal")
ID(league_name = "Spanish La Liga")
myleague(leagueID = 1639)
myleague(leagueID = 1639, table = "yes")
myteam(leagueID = 1639, team_name = "Arsenal")
myteam(leagueID = 1639, team_name = "Arsenal", past_results = "yes")
myteam(leagueID = 1639, team_name = "Arsenal", past_results = "yes", future = 5)
myplayer(teamID = 19)
myplayer(teamID = 19, player_name = "Bernd Leno")
mytopstats(leagueID = 1639, stat = "Goals")
mytopstats(leagueID = 1134, stat = "Assists" )
mytopstats(leagueID = 1639, stat = "Goals", more_details = "yes")
library(footyr)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>")
library(dplyr)
library(tibble)
library(jsonlite)
library(magrittr)
library(tidyr)
library(stringr)
library(httr)
#Load the package
library(footyr)
ID(league_name = "English Premier League", team_name = "Arsenal")
ID(league_name = "Spanish La Liga")
myleague(leagueID = 1639)
myleague(leagueID = 1639, table = "yes")
myteam(leagueID = 1639, team_name = "Arsenal")
myteam(leagueID = 1639, team_name = "Arsenal", past_results = "yes")
myteam(leagueID = 1639, team_name = "Arsenal", past_results = "yes", future = 5)
myplayer(teamID = 19)
myplayer(teamID = 19, player_name = "Bernd Leno")
mytopstats(leagueID = 1639, stat = "Goals")
mytopstats(leagueID = 1134, stat = "Assists" )
mytopstats(leagueID = 1639, stat = "Goals", more_details = "yes")
library(devtools)
library(roxygen2)
check()
document()
check()
warnings()
note()
library(devtools)
library(roxygen2)
?use_mit_license
document()
CHECK()
check()
document()
use_mit_license(name = find_name())
use_mit_license(name = "Timothy Young")
use_mit_license(name = "Timothy Young")
use_readme_md()
?install_github
?dplyr
devtools::install_github("tyoung/footyr")
devtools::install_github("Young_Timothy/Final Project/footyr")
